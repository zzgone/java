package 语言基础;

public class GC垃圾回收机制 {

	@SuppressWarnings("unused")
	public static void main(String[] args) {
		/**
		 * 垃圾回收
		 * 
		 * 垃圾回收机制只能回收那些有new 操作符创建的对象
		 * 如果有些对象不是通过new操作符在内存中获取一块内存区域的话，这种对象是不能不被gc回收的
		 * 所以java中条共了一个finalize()方法，这个方法是object类的方法，他被声明为protected
		 * 用户可以在自己的类中定义这个方法，如果用户在类中定义了finalize()方法，在垃圾回收时首先调用该方法
		 * 并且在下一次垃圾回收动作发生时，才能真正回收对象占用的内存。
		 * 
		 * 垃圾回收或者是finalize*(方法不保证一定会发生，如java虚拟机面临损耗殆尽的情形
		 * 他是不会执行垃圾回收的。
		 * 
		 * 由于垃圾回收不受人为控制，具体执行时间也不确定，所以finalize()方法也就无法执行
		 * 为此，java提供了System.gc()方法强制启动垃圾回收器，这和给120打电话通知医院来救护的道理一样
		 * 告知垃圾回收期来清理无用内存对象
		 * 
		 * */
		
		{
			GC垃圾回收机制 gcl = new GC垃圾回收机制();
		}
		// gcl对象超过其作用范围，将消亡
		
		{
			GC垃圾回收机制 gcl = new GC垃圾回收机制();
			gcl = null;
			//对象被置空，将消亡
		}
	}
}
